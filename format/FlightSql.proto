/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
import "google/protobuf/wrappers.proto";
import "google/protobuf/descriptor.proto";

option java_package = "org.apache.arrow.flight.sql.impl";
package arrow.flight.protocol.sql;

/*
 * Represents a metadata request. Used in the command member of FlightDescriptor
 * for the following RPC calls:
 *  - GetSchema: return the schema of the query.
 *  - GetFlightInfo: execute the metadata request.
 *
 * The returned schema will be:
 * <
 *  info_name: uint32,
 *  value: dense_union<string_value: string, int_value: int32, bigint_value: int64, int32_bitmask: int32>
 * >
 * where there is one row per requested piece of metadata information.
 */
message CommandGetSqlInfo {
  option (experimental) = true;

  /*
   * Values are modelled after ODBC's SQLGetInfo() function. This information is intended to provide
   * Flight SQL clients with basic, SQL syntax and SQL functions related information.
   * More information types can be added in future releases.
   * E.g. more SQL syntax support types, scalar functions support, type conversion support etc.
   *
   * // TODO: Flesh out the available set of metadata below.
   *
   * Initially, Flight SQL will support the following information types:
   * - Server Information - Range [0-500)
   * - Syntax Information - Range [500-1000)
   * Range [0-100000) is reserved for defaults. Custom options should start at 100000.
   *
   * 1. Server Information [0-500): Provides basic information about the Flight SQL Server.
   *
   * The name of the Flight SQL Server.
   * 0 = FLIGHT_SQL_SERVER_NAME
   *
   * The native version of the Flight SQL Server.
   * 1 = FLIGHT_SQL_SERVER_VERSION
   *
   * The Arrow format version of the Flight SQL Server.
   * 2 = FLIGHT_SQL_SERVER_ARROW_VERSION
   *
   * Indicates whether the Flight SQL Server is read only.
   * 3 = FLIGHT_SQL_SERVER_READ_ONLY
   *
   * 2. SQL Syntax Information [500-1000): provides information about SQL syntax supported by the Flight SQL Server.
   *
   * Indicates whether the Flight SQL Server supports CREATE and DROP of catalogs.
   * In a SQL environment, a catalog is a collection of schemas.
   * 500 = SQL_DDL_CATALOG
   *
   * Indicates whether the Flight SQL Server supports CREATE and DROP of schemas.
   * In a SQL environment, a catalog is a collection of tables, views, indexes etc.
   * 501 = SQL_DDL_SCHEMA
   *
   * Indicates whether the Flight SQL Server supports CREATE and DROP of tables.
   * In a SQL environment, a table is a collection of rows of information. Each row of information
   * may have one or more columns of data.
   * 502 = SQL_DDL_TABLE
   *
   * Indicates the case sensitivity of catalog, table and schema names.
   * 503 = SQL_IDENTIFIER_CASE
   *
   * Indicates the supported character(s) used to surround a delimited identifier.
   * 504 = SQL_IDENTIFIER_QUOTE_CHAR
   *
   * Indicates case sensitivity of quoted identifiers.
   * 505 = SQL_QUOTED_IDENTIFIER_CASE
   *
   * If omitted, then all metadata will be retrieved.
   * Flight SQL Servers may choose to include additional metadata above and beyond the specified set, however they must
   * at least return the specified set. IDs ranging from 0 to 10,000 (exclusive) are reserved for future use.
   * If additional metadata is included, the metadata IDs should start from 10,000.
   */
  repeated uint32 info = 1;
}

/*
 * Represents a request to retrieve the list of catalogs on a Flight SQL enabled backend.
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned schema will be:
 * <
 *  catalog_name: utf8
 * >
 * The returned data should be ordered by catalog_name.
 */
message CommandGetCatalogs {
  option (experimental) = true;
}

/*
 * Represents a request to retrieve the list of schemas on a Flight SQL enabled backend.
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned schema will be:
 * <
 *  catalog_name: utf8,
 *  schema_name: utf8
 * >
 * The returned data should be ordered by catalog_name, then schema_name.
 */
message CommandGetSchemas {
  option (experimental) = true;

  /*
   * Specifies the Catalog to search for schemas.
   * If omitted, then all catalogs are searched.
   */
  google.protobuf.StringValue catalog = 1;

  /*
   * Specifies a filter pattern for schemas to search for.
   * When no schema_filter_pattern is provided, the pattern will not be used to narrow the search.
   * In the pattern string, two special characters can be used to denote matching rules:
   *    - "%" means to match any substring with 0 or more characters.
   *    - "_" means to match any one character.
   */
  google.protobuf.StringValue schema_filter_pattern = 2;
}

/*
 * Represents a request to retrieve the list of tables, and optionally their schemas, on a Flight SQL enabled backend.
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned schema will be:
 * <
 *  catalog_name: utf8,
 *  schema_name: utf8,
 *  table_name: utf8,
 *  table_type: utf8,
 *  table_schema: bytes (schema of the table as described in Schema.fbs::Schema, it is serialized as an IPC message.)
 * >
 * The returned data should be ordered by catalog_name, schema_name, table_name, then table_type.
 */
message CommandGetTables {
  option (experimental) = true;

  /*
   * Specifies the Catalog to search for the tables.
   * If omitted, then all catalogs are searched.
   */
  google.protobuf.StringValue catalog = 1;

  /*
   * Specifies a filter pattern for schemas to search for.
   * When no schema_filter_pattern is provided, all schemas matching other filters are searched.
   * In the pattern string, two special characters can be used to denote matching rules:
   *    - "%" means to match any substring with 0 or more characters.
   *    - "_" means to match any one character.
   */
  google.protobuf.StringValue schema_filter_pattern = 2;

  /*
   * Specifies a filter pattern for tables to search for.
   * When no table_name_filter_pattern is provided, all tables matching other filters are searched.
   * In the pattern string, two special characters can be used to denote matching rules:
   *    - "%" means to match any substring with 0 or more characters.
   *    - "_" means to match any one character.
   */
  google.protobuf.StringValue table_name_filter_pattern = 3;

  // Specifies a filter of table types which must match.
  repeated string table_types = 4;

  // Specifies if the schema should be returned for found tables.
  bool include_schema = 5;
}

/*
 * Represents a request to retrieve the list of table types on a Flight SQL enabled backend.
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned schema will be:
 * <
 *  table_type: utf8
 * >
 * The returned data should be ordered by table_type.
 */
message CommandGetTableTypes {
  option (experimental) = true;
}

/*
 * Represents a request to retrieve the primary keys of a table on a Flight SQL enabled backend.
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned schema will be:
 * <
 *  catalog_name: utf8,
 *  schema_name: utf8,
 *  table_name: utf8,
 *  column_name: utf8,
 *  key_name: utf8,
 *  key_sequence: int
 * >
 * The returned data should be ordered by catalog_name, schema_name, table_name, key_name, then key_sequence.
 */
message CommandGetPrimaryKeys {
  option (experimental) = true;

  // Specifies the catalog to search for the table.
  google.protobuf.StringValue catalog = 1;

  // Specifies the schema to search for the table.
  google.protobuf.StringValue schema = 2;

  // Specifies the table to get the primary keys for.
  google.protobuf.StringValue table = 3;
}

/*
 * Represents a request to retrieve a description of the foreign key columns that reference the given table's
 * primary key columns (the foreign keys exported by a table) of a table on a Flight SQL enabled backend.
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned schema will be:
 * <
 *  pk_catalog_name: utf8,
 *  pk_schema_name: utf8,
 *  pk_table_name: utf8,
 *  pk_column_name: utf8,
 *  fk_catalog_name: utf8,
 *  fk_schema_name: utf8,
 *  fk_table_name: utf8,
 *  fk_column_name: utf8,
 *  key_sequence: int,
 *  fk_key_name: utf8,
 *  pk_key_name: utf8,
 *  update_rule: uint1,
 *  delete_rule: uint1
 * >
 * The returned data should be ordered by fk_catalog_name, fk_schema_name, fk_table_name, fk_key_name, then key_sequence.
 * update_rule and delete_rule returns a byte that is equivalent to actions:
 *    - 0 = CASCADE
 *    - 1 = RESTRICT
 *    - 2 = SET NULL
 *    - 3 = NO ACTION
 *    - 4 = SET DEFAULT
 */
message CommandGetExportedKeys {
  option (experimental) = true;

  // Specifies the catalog to search for the foreign key table.
  google.protobuf.StringValue catalog = 1;

  // Specifies the schema to search for the foreign key table.
  google.protobuf.StringValue schema = 2;

  // Specifies the foreign key table to get the foreign keys for.
  string table = 3;
}

/*
 * Represents a request to retrieve the foreign keys of a table on a Flight SQL enabled backend.
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned schema will be:
 * <
 *  pk_catalog_name: utf8,
 *  pk_schema_name: utf8,
 *  pk_table_name: utf8,
 *  pk_column_name: utf8,
 *  fk_catalog_name: utf8,
 *  fk_schema_name: utf8,
 *  fk_table_name: utf8,
 *  fk_column_name: utf8,
 *  key_sequence: int,
 *  fk_key_name: utf8,
 *  pk_key_name: utf8,
 *  update_rule: uint1,
 *  delete_rule: uint1
 * >
 * The returned data should be ordered by pk_catalog_name, pk_schema_name, pk_table_name, pk_key_name, then key_sequence.
 * update_rule and delete_rule returns a byte that is equivalent to actions:
 *    - 0 = CASCADE
 *    - 1 = RESTRICT
 *    - 2 = SET NULL
 *    - 3 = NO ACTION
 *    - 4 = SET DEFAULT
 */
message CommandGetImportedKeys {
  option (experimental) = true;

  // Specifies the catalog to search for the primary key table.
  google.protobuf.StringValue catalog = 1;

  // Specifies the schema to search for the primary key table.
  google.protobuf.StringValue schema = 2;

  // Specifies the primary key table to get the foreign keys for.
  string table = 3;
}

// SQL Execution Action Messages

/*
 * Request message for the "CreatePreparedStatement" action on a Flight SQL enabled backend.
 */
message ActionCreatePreparedStatementRequest {
  option (experimental) = true;

  // The valid SQL string to create a prepared statement for.
  string query = 1;
}

/*
 * Wrap the result of a "GetPreparedStatement" action.
 */
message ActionCreatePreparedStatementResult {
  option (experimental) = true;

  // Opaque handle for the prepared statement on the server.
  bytes prepared_statement_handle = 1;

  // If a result set generating query was provided, dataset_schema contains the 
  // schema of the dataset as described in Schema.fbs::Schema, it is serialized as an IPC message.
  bytes dataset_schema = 2;

  // If the query provided contained parameters, parameter_schema contains the 
  // schema of the expected parameters as described in Schema.fbs::Schema, it is serialized as an IPC message.
  bytes parameter_schema = 3;
}

/*
 * Request message for the "ClosePreparedStatement" action on a Flight SQL enabled backend.
 * Closes server resources associated with the prepared statement handle.
 */
message ActionClosePreparedStatementRequest {
  option (experimental) = true;

  // Opaque handle for the prepared statement on the server.
  bytes prepared_statement_handle = 1;
}


// SQL Execution Messages.

/*
 * Represents a SQL query. Used in the command member of FlightDescriptor
 * for the following RPC calls:
 *  - GetSchema: return the schema of the query.
 *  - GetFlightInfo: execute the query.
 */
message CommandStatementQuery {
  option (experimental) = true;

  // The SQL syntax.
  string query = 1;

  // Unique identifier for the instance of the statement to execute.
  bytes client_execution_handle = 2;
}

/*
 * Represents an instance of executing a prepared statement. Used in the command member of FlightDescriptor for
 * the following RPC calls:
 *  - DoPut: bind parameter values. All of the bound parameter sets will be executed as a single atomic execution.
 *  - GetFlightInfo: execute the prepared statement instance.
 */
message CommandPreparedStatementQuery {
  option (experimental) = true;

  // Opaque handle for the prepared statement on the server.
  bytes prepared_statement_handle = 1;
}

/*
 * Represents a SQL update query. Used in the command member of FlightDescriptor
 * for the the RPC call DoPut to cause the server to execute the included SQL update.
 */
message CommandStatementUpdate {
  option (experimental) = true;

  // The SQL syntax.
  string query = 1;
}

/*
 * Represents a SQL update query. Used in the command member of FlightDescriptor
 * for the the RPC call DoPut to cause the server to execute the included 
 * prepared statement handle as an update.
 */
message CommandPreparedStatementUpdate {
  option (experimental) = true;

  // Opaque handle for the prepared statement on the server.
  bytes prepared_statement_handle = 1;
}

/*
 * Returned from the RPC call DoPut when a CommandStatementUpdate
 * CommandPreparedStatementUpdate was in the request, containing
 * results from the update. 
 */
message DoPutUpdateResult {
  option (experimental) = true;

  // The number of records updated. A return value of -1 represents 
  // an unknown updated record count.
  int64 record_count = 1;
}

extend google.protobuf.MessageOptions {
  bool experimental = 1000;
}
